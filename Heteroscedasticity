import pandas as pd
data = pd.read_csv('/Users/utahagen/Downloads/data_fin.csv')
data.describe()
# print(data.to_string()) # Tip: use to_string() to print the entire DataFrame.

# one way to do the regression model
import statsmodels.api as sm
# defining the variables
OBS = data['OBS'].tolist()     # The tolist() function is used to convert a given array to an ordinary list with the same items, elements, or values.
E = data['E'].tolist()
N = data['N'].tolist()
S = data['S'].tolist()
W = data['W'].tolist()
PCEXP = data['PCEXP'].tolist()
EXP = data['EXP'].tolist()
PCAID = data['PCAID'].tolist()
AID = data['AID'].tolist()
POP = data['POP'].tolist()
DEN = data['DEN'].tolist()
DPOP = data['DPOP'].tolist()
URB = data['URB'].tolist()
PCINC = data['PCINC'].tolist()
INC = data['INC'].tolist()
PS = data['PS'].tolist()

# add the constant term


# second way to do the regression (better than the first one)
# regression model 
import statsmodels.formula.api as smf
result = sm.OLS(EXP, AID, POP, INC).fit()
result = smf.ols('EXP ~ AID + POP + INC', data = data).fit()
result.summary()


#plot the results
import matplotlib.pyplot as plt
#define figure size
fig = plt.figure(figsize=(15,10))

#produce regression plots
fig = sm.graphics.plot_regress_exog(result, 'POP', fig=fig)

# some key indicates
import statsmodels.stats.api as sms
from statsmodels.compat import lzip
import statsmodels.stats.diagnostic
# Conduct the Breusch-Pagan test
names = ['Expenditure data statistic', 'p-value',
         'f-value', 'f p-value']


# redo the regression model with the bias
# Get the test result
test_result1 = sms.het_breuschpagan(result.resid, result.model.exog)
lzip(names, test_result1)


# Conduct the White test
test_result2 = statsmodels.stats.diagnostic.het_white(result.resid, result.model.exog)
lzip(names, test_result2)
# robust standard error
# result_robust = sm.OLS(EXP, AID, POP, INC).fit(cov_type='HC1')
result_robust = smf.ols('EXP ~ AID + POP + INC', data = data).fit(cov_type='HC1')
result_robust.summary()
result_robust.conf_int()
